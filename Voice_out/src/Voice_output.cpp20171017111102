// -*- C++ -*-
/*!
 * @file  Voice_output.cpp
 * @brief ModuleDescription
 * @date $Date$
 *
 * @author 芝浦工業大学　下山未来
 *
 * 修正BSDライセンス
 *
 * $Id$
 */

#include "Voice_output.h"

// Module specification
// <rtc-template block="module_spec">
static const char* voice_output_spec[] =
  {
    "implementation_id", "Voice_output",
    "type_name",         "Voice_output",
    "description",       "ModuleDescription",
    "version",           "1.0.0",
    "vendor",            "MiraiShimoyama",
    "category",          "Category",
    "activity_type",     "PERIODIC",
    "kind",              "DataFlowComponent",
    "max_instance",      "1",
    "language",          "C++",
    "lang_type",         "compile",
	// Configuration variables
    "conf.default.Picture_Save_Folder","C:\\Picture\con1.png",
	// Widget
	"conf.__widget__.Picture_Save_Folder","text",
	""
  };
// </rtc-template>

/*!
 * @brief constructor
 * @param manager Maneger Object
 */
Voice_output::Voice_output(RTC::Manager* manager)
    // <rtc-template block="initializer">
  : RTC::DataFlowComponentBase(manager),
    m_ZigBeeIn("ZigBee", m_ZigBee)
	//m_VoiceOut("Voice", m_Voice)
    // </rtc-template>
{
}

/*!
 * @brief destructor
 */
Voice_output::~Voice_output()
{
}



RTC::ReturnCode_t Voice_output::onInitialize()
{
  // Registration: InPort/OutPort/Service
  // <rtc-template block="registration">
  // Set InPort buffers
  addInPort("ZigBee", m_ZigBeeIn);
  //addOutPort("Voice",m_VoiceOut);
  // Set OutPort buffer
  
  // Set service provider to Ports
  
  // Set service consumers to Ports
  
  // Set CORBA Service Ports
  
  bindParameter("ReadImageSource", m_ReadImageSource, "C:\\Picture\con1.png");
  
  // </rtc-template>

  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t Voice_output::onFinalize()
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t Voice_output::onStartup(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t Voice_output::onShutdown(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/


RTC::ReturnCode_t Voice_output::onActivated(RTC::UniqueId ec_id)
{
	Initialize();
	std::cout<<"------Activate------"<<std::endl;
  return RTC::RTC_OK;
}


RTC::ReturnCode_t Voice_output::onDeactivated(RTC::UniqueId ec_id)
{
	if(m_Image_buff != NULL)
	{
		std::cout<<"前に取得した画像のメモリを開放"<<std::endl;
		cvReleaseImage(&m_Image_buff);
	}
	Initialize();
	std::cout<<"-----Deactivate-----"<<std::endl;
  return RTC::RTC_OK;
}


RTC::ReturnCode_t Voice_output::onExecute(RTC::UniqueId ec_id)
{
	m_ZigBeeIn.read();
	if(flag==1){
				sound();
				Image_set();
				Show_Image();
				flag=0;
	}
	if(m_ZigBeeIn.isNew()){
		str = m_ZigBee.data;
		if(str=="P1,0"){
			//Voice(1000,"いちの場所です",true);		//ロボットがしゃべる．
			sound();	
			Image_set();
			Show_Image();
		}
			if(str=="P2,0"){
				//Voice(1000,"にの場所です",true);		//ロボットがしゃべる．
				sound();
				Image_set();
				Show_Image();
			}
			if(str=="P3,0"){
				sound();
				//Voice(1000,"さんの場所です",true);		//ロボットがしゃべる．
				Image_set();
				Show_Image();
			}
			if(str=="P4,0"){
				//Voice(1000,"よんの場所です",true);		//ロボットがしゃべる．
				sound();
				Image_set();
				Show_Image();
			}
	}
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t Voice_output::onAborting(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t Voice_output::onError(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t Voice_output::onReset(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t Voice_output::onStateUpdate(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t Voice_output::onRateChanged(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

void Voice_output::Initialize()
{

	flag=1;
	// イメージ用メモリの初期化
	m_Image_buff = NULL;

	// InPortの画面サイズの初期化

	std::cout<<"初期化処理完了"<<std::endl;
}

//アラームを鳴らす関数
void Voice_output::sound()
{
	PlaySound(_T(m_Alarm_Sound.c_str()), NULL, SND_FILENAME);
}

//音声出力関数
/*void Voice_output::Voice(int time , char str[], bool display)
{
	m_Voice.data = CORBA::string_dup(str);
	m_VoiceOut.write();
	wait(2000);
}*/

//画像に注目度を載せて表示する関数
void Voice_output::Show_Image()
{

   std::cout<<"画像を表示します"<<std::endl;

   if(m_Image_buff == 0){
	   std::cout<<"画像が読み込めませんでした"<<std::endl;
	   return ;
	}
	cvNamedWindow("Concierge", CV_WINDOW_AUTOSIZE);
	cvShowImage("Concierge",m_Image_buff);
   
	if(cv::waitKey(5) >=0);

}

//画像データを取得する関数
void Voice_output::Image_set()
{
	if (img_h != 0 ||	img_w != 0)
	{
		std::cout<<"画像データが取得できました"<<std::endl;
		if (m_Image_buff != NULL)
		{
			cvReleaseImage(&m_Image_buff);
		}
	
		cvDestroyWindow("集中の様子");
		std::cout<<"前に取得した画像のメモリを開放"<<std::endl;
		cvReleaseImage(&m_Image_buff);
		
		//画像を読み取る
		m_Image_buff = cvLoadImage(m_ReadImageSource.c_str(), CV_LOAD_IMAGE_COLOR);
		if (m_Image_buff == 0){ 
			std::cerr << "画像の読み込みに失敗しました" << std::endl;
		}
		else{}
	}
	else
	{
		std::cout<<"画像データがありませんでした"<<std::endl;
	}
}

extern "C"
{
 
  void Voice_outputInit(RTC::Manager* manager)
  {
    coil::Properties profile(voice_output_spec);
    manager->registerFactory(profile,
                             RTC::Create<Voice_output>,
                             RTC::Delete<Voice_output>);
  }
  
};


